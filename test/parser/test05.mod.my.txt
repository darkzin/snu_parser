parsing 'test/parser/test05.mod'...
===(DEBUG)===Current scanner peek : min
===(DEBUG)===Current scanner peek : max
===(DEBUG)=== Added variable <max> to scope.
===(DEBUG)=== Added variable <min> to scope.
===(DEBUG)===Next token is : ;
===(DEBUG)===Got semicolon of end of var decl.
===(DEBUG)===Next token is : begin
===(DEBUG)===Case of assignment or subroutineCall in statement. commentFirst : min
===(DEBUG)===Case of assignment in statement.
===(DEBUG)===Start of assignment
===(DEBUG)===Found symbol : min
===(DEBUG)===Made new CAstDesignator class for id.
===(DEBUG)===Consumed assignment token.
===(DEBUG)===Now at expression function.
===(DEBUG)===Got simpleexpr for left side of expression. Next token is : ;
===(DEBUG)===Got LHS and RHS of assignment.
===(DEBUG)===Now setting tail and head of statement sequence. Next token is : ;
===(DEBUG)===Set tail and head of statement sequence. Next token is : ;
===(DEBUG)===Case of assignment or subroutineCall in statement. commentFirst : max
===(DEBUG)===Case of assignment in statement.
===(DEBUG)===Start of assignment
===(DEBUG)===Found symbol : max
===(DEBUG)===Made new CAstDesignator class for id.
===(DEBUG)===Consumed assignment token.
===(DEBUG)===Now at expression function.
===(DEBUG)===Now processing factor. Next token : 2147483647(type : tNum)
===(DEBUG)===factor number case.
===(DEBUG)===Constructed factor term. Next token is : end
===(DEBUG)===Constructed term for simpleexpr. Next token is : end
===(DEBUG)===Got simpleexpr for left side of expression. Next token is : end
===(DEBUG)===Got LHS and RHS of assignment.
===(DEBUG)===Now setting tail and head of statement sequence. Next token is : end
===(DEBUG)===Set tail and head of statement sequence. Next token is : end
successfully parsed.
  AST:
    CAstScope: 'test05'
      symbol table:
        [[
          [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
          [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
          [ *ReadInt() --> <int>           ]
          [ *WriteChar(<char>) --> <NULL>           ]
          [ *WriteInt(<int>) --> <NULL>           ]
          [ *WriteLn() --> <NULL>           ]
          [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
          [ @max      <int>           ]
          [ @min      <int>           ]
        ]]
      statement list:
        := <int>
          [ @min      <int> ] <int>
          -2147483648 <int>
        := <int>
          [ @max      <int> ] <int>
          2147483647 <int>
      nested scopes:
        empty.
    


run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/parser/test05.mod.ast.pdf test/parser/test05.mod.ast.dot


Done.
