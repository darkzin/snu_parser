-     #-18841368(%ebp)18841324  [ $v5       <array 2 of <array 89 of <array 25 of <array 58 of <array 73 of <char>>>>>> %ebp-18841368 ]
+     #   -18841368(%ebp)  18841324  [ $v5       <array 2 of <array 89 of <array 25 of <array 58 of <array 73 of <char>>>>>> %ebp-18841368 ]
-     #-31531824(%ebp)12690456  [ $v6       <array 36 of <array 96 of <array 17 of <array 54 of <array 1 of <int>>>>>> %ebp-31531824 ]
+     #   -31531824(%ebp)  12690456  [ $v6       <array 36 of <array 96 of <array 17 of <array 54 of <array 1 of <int>>>>>> %ebp-31531824 ]
-     #-537266888(%ebp)505735064  [ $v7       <array 47 of <array 80 of <array 92 of <array 43 of <array 34 of <char>>>>>> %ebp-537266888 ]
+     #   -537266888(%ebp)  505735064  [ $v7       <array 47 of <array 80 of <array 92 of <array 43 of <array 34 of <char>>>>>> %ebp-537266888 ]
-     addl    $13, %esp              
+     addl    $16, %esp              
+     jmp     l_f2_4                  #   0:     goto   4
+ l_f2_4:
+     jmp     l_f2_2                  #   2:     goto   2
-     movl    $1, %eax                #   0:     assign t11 <- 1
+     movl    $1, %eax                #   3:     assign t11 <- 1
-     jmp     l_f2_3                  #   1:     goto   3
+     jmp     l_f2_3                  #   4:     goto   3
+ l_f2_2:
-     movl    $0, %eax                #   2:     assign t11 <- 0
+     movl    $0, %eax                #   6:     assign t11 <- 0
-     movzbl  -13(%ebp), %eax         #   4:     return t11
+     movzbl  -13(%ebp), %eax         #   8:     return t11
-     movl    $77770, %eax            #   5:     if     77770 # 74927 goto 9_if_true
+     movl    $77770, %eax            #   9:     if     77770 # 74927 goto 9_if_true
-     jmp     l_f2_10_if_false        #   6:     goto   10_if_false
+     jmp     l_f2_10_if_false        #  10:     goto   10_if_false
-     movl    $87815, %eax            #   8:     if     87815 < 78034 goto 13
+     movl    $87815, %eax            #  12:     if     87815 < 78034 goto 13
-     jmp     l_f2_14                 #   9:     goto   14
+     jmp     l_f2_14                 #  13:     goto   14
-     movl    $1, %eax                #  11:     assign t12 <- 1
+     movl    $1, %eax                #  15:     assign t12 <- 1
-     jmp     l_f2_15                 #  12:     goto   15
+     jmp     l_f2_15                 #  16:     goto   15
-     movl    $0, %eax                #  14:     assign t12 <- 0
+     movl    $0, %eax                #  18:     assign t12 <- 0
-     movzbl  -14(%ebp), %eax         #  16:     param  3 <- t12
+     movzbl  -14(%ebp), %eax         #  20:     param  3 <- t12
-     movl    $97, %eax               #  17:     param  2 <- 97
+     movl    $97, %eax               #  21:     param  2 <- 97
-     movl    $1, %eax                #  18:     param  1 <- 1
+     movl    $1, %eax                #  22:     param  1 <- 1
-     call    dummyCHARfunc           #  19:     call   t13 <- dummyCHARfunc
+     call    dummyCHARfunc           #  23:     call   t13 <- dummyCHARfunc
-     movl    $100, %eax              #  20:     if     100 > t13 goto 17
+     movl    $100, %eax              #  24:     if     100 > t13 goto 17
-     jmp     l_f2_18                 #  21:     goto   18
+     jmp     l_f2_18                 #  25:     goto   18
-     movl    $1, %eax                #  23:     assign t14 <- 1
+     movl    $1, %eax                #  27:     assign t14 <- 1
-     jmp     l_f2_19                 #  24:     goto   19
+     jmp     l_f2_19                 #  28:     goto   19
-     movl    $0, %eax                #  26:     assign t14 <- 0
+     movl    $0, %eax                #  30:     assign t14 <- 0
-     movzbl  -16(%ebp), %eax         #  28:     param  0 <- t14
+     movzbl  -16(%ebp), %eax         #  32:     param  0 <- t14
-     call    f1                      #  29:     call   t15 <- f1
+     call    f1                      #  33:     call   t15 <- f1
-     addl    $4, %esp               
+     addl    $16, %esp              
-     jmp     l_f2_8                  #  30:     goto   8
+     jmp     l_f2_8                  #  34:     goto   8
-     movl    $100, %eax              #  33:     if     100 > 100 goto 22_if_true
+     movl    $100, %eax              #  37:     if     100 > 100 goto 22_if_true
-     jmp     l_f2_23_if_false        #  34:     goto   23_if_false
+     jmp     l_f2_23_if_false        #  38:     goto   23_if_false
-     movl    $0, %eax                #  36:     return 0
+     movl    $0, %eax                #  40:     return 0
-     call    dummyINTfunc            #  37:     call   t16 <- dummyINTfunc
+     call    dummyINTfunc            #  41:     call   t16 <- dummyINTfunc
-     jmp     l_f2_21                 #  38:     goto   21
+     jmp     l_f2_21                 #  42:     goto   21
-     addl    $13, %esp              
+     addl    $16, %esp              
