-     #    -80(%ebp)   4  [ $t26      <int> %ebp-80 ]
-     #    -81(%ebp)   1  [ $t5       <bool> %ebp-81 ]
+     #    -77(%ebp)   1  [ $t5       <bool> %ebp-77 ]
-     #    -82(%ebp)   1  [ $t6       <bool> %ebp-82 ]
+     #    -78(%ebp)   1  [ $t6       <bool> %ebp-78 ]
-     #    -83(%ebp)   1  [ $t7       <char> %ebp-83 ]
+     #    -79(%ebp)   1  [ $t7       <char> %ebp-79 ]
-     #    -84(%ebp)   1  [ $t8       <char> %ebp-84 ]
+     #    -80(%ebp)   1  [ $t8       <char> %ebp-80 ]
-     #    -88(%ebp)   4  [ $t9       <int> %ebp-88 ]
+     #    -84(%ebp)   4  [ $t9       <int> %ebp-84 ]
-     #    -89(%ebp)   1  [ $v2       <bool> %ebp-89 ]
+     #    -85(%ebp)   1  [ $v2       <bool> %ebp-85 ]
-     #    -96(%ebp)   4  [ $v3       <int> %ebp-96 ]
+     #    -92(%ebp)   4  [ $v3       <int> %ebp-92 ]
-     #    -97(%ebp)   1  [ $v4       <char> %ebp-97 ]
+     #    -93(%ebp)   1  [ $v4       <char> %ebp-93 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $88, %esp               # make room for locals
+     subl    $84, %esp               # make room for locals
-     movl    $22, %ecx              
+     movl    $21, %ecx              
+     jmp     l_f0_2                  #   1:     goto   2
+     jmp     l_f0_2                  #   2:     goto   2
-     movl    $1, %eax                #   2:     assign t5 <- 1
+     movl    $1, %eax                #   4:     assign t5 <- 1
-     movb    %al, -81(%ebp)         
+     movb    %al, -77(%ebp)         
-     jmp     l_f0_3                  #   3:     goto   3
+     jmp     l_f0_3                  #   5:     goto   3
+ l_f0_2:
-     movl    $0, %eax                #   4:     assign t5 <- 0
+     movl    $0, %eax                #   7:     assign t5 <- 0
-     movb    %al, -81(%ebp)         
+     movb    %al, -77(%ebp)         
-     movzbl  -81(%ebp), %eax         #   6:     return t5
+     movzbl  -77(%ebp), %eax         #   9:     return t5
-     movl    $0, %eax                #   7:     return 0
+     movl    $0, %eax                #  10:     return 0
-     movl    $98, %eax               #   9:     if     98 < 98 goto 15_while_body
+     movl    $98, %eax               #  12:     if     98 < 98 goto 15_while_body
-     jmp     l_f0_13                 #  10:     goto   13
+     jmp     l_f0_13                 #  13:     goto   13
-     jmp     l_f0_14_while_cond      #  12:     goto   14_while_cond
+     jmp     l_f0_14_while_cond      #  15:     goto   14_while_cond
-     movl    $55576, %eax            #  14:     if     55576 <= 34406 goto 18_if_true
+     movl    $55576, %eax            #  17:     if     55576 <= 34406 goto 18_if_true
-     jmp     l_f0_19_if_false        #  15:     goto   19_if_false
+     jmp     l_f0_19_if_false        #  18:     goto   19_if_false
-     jmp     l_f0_17                 #  17:     goto   17
+     jmp     l_f0_17                 #  20:     goto   17
-     movl    $28724, %eax            #  20:     if     28724 <= 85907 goto 22
+     movl    $28724, %eax            #  23:     if     28724 <= 85907 goto 22
-     jmp     l_f0_23                 #  21:     goto   23
+     jmp     l_f0_23                 #  24:     goto   23
-     movl    $1, %eax                #  23:     assign t6 <- 1
+     movl    $1, %eax                #  26:     assign t6 <- 1
-     movb    %al, -82(%ebp)         
+     movb    %al, -78(%ebp)         
-     jmp     l_f0_24                 #  24:     goto   24
+     jmp     l_f0_24                 #  27:     goto   24
-     movl    $0, %eax                #  26:     assign t6 <- 0
+     movl    $0, %eax                #  29:     assign t6 <- 0
-     movb    %al, -82(%ebp)         
+     movb    %al, -78(%ebp)         
-     movzbl  -82(%ebp), %eax         #  28:     assign v2 <- t6
+     movzbl  -78(%ebp), %eax         #  31:     assign v2 <- t6
-     movb    %al, -89(%ebp)         
+     movb    %al, -85(%ebp)         
-     call    dummyCHARfunc           #  29:     call   t7 <- dummyCHARfunc
+     call    dummyCHARfunc           #  32:     call   t7 <- dummyCHARfunc
-     movb    %al, -83(%ebp)         
+     movb    %al, -79(%ebp)         
-     movl    $71112, %eax            #  30:     assign v3 <- 71112
+     movl    $71112, %eax            #  33:     assign v3 <- 71112
-     movl    %eax, -96(%ebp)        
+     movl    %eax, -92(%ebp)        
-     movl    $89295, %eax            #  31:     assign v3 <- 89295
+     movl    $89295, %eax            #  34:     assign v3 <- 89295
-     movl    %eax, -96(%ebp)        
+     movl    %eax, -92(%ebp)        
-     jmp     l_f0_9                  #  32:     goto   9
+     jmp     l_f0_9                  #  35:     goto   9
-     call    dummyCHARfunc           #  34:     call   t8 <- dummyCHARfunc
+     call    dummyCHARfunc           #  37:     call   t8 <- dummyCHARfunc
-     movb    %al, -84(%ebp)         
+     movb    %al, -80(%ebp)         
-     movl    $2, %eax                #  35:     param  1 <- 2
+     movl    $2, %eax                #  38:     param  1 <- 2
-     movl    8(%ebp), %eax           #  36:     param  0 <- v0
+     movl    8(%ebp), %eax           #  39:     param  0 <- v0
-     call    DIM                     #  37:     call   t9 <- DIM
+     call    DIM                     #  40:     call   t9 <- DIM
-     movl    %eax, -88(%ebp)        
+     movl    %eax, -84(%ebp)        
-     movl    $97220, %eax            #  38:     mul    t10 <- 97220, t9
+     movl    $97220, %eax            #  41:     mul    t10 <- 97220, t9
-     movl    -88(%ebp), %ebx        
+     movl    -84(%ebp), %ebx        
-     movl    $85985, %eax            #  39:     add    t11 <- 85985, 37253
+     movl    $85985, %eax            #  42:     add    t11 <- 85985, 37253
-     movl    -16(%ebp), %eax         #  40:     add    t12 <- t10, t11
+     movl    -16(%ebp), %eax         #  43:     add    t12 <- t10, t11
-     movl    $3, %eax                #  41:     param  1 <- 3
+     movl    $3, %eax                #  44:     param  1 <- 3
-     movl    8(%ebp), %eax           #  42:     param  0 <- v0
+     movl    8(%ebp), %eax           #  45:     param  0 <- v0
-     call    DIM                     #  43:     call   t13 <- DIM
+     call    DIM                     #  46:     call   t13 <- DIM
+     movl    -24(%ebp), %eax         #  47:     mul    t14 <- t12, t13
+     movl    -28(%ebp), %ebx        
+     imull   %ebx                   
+     movl    %eax, -32(%ebp)        
-     movl    $85985, %eax            #  44:     add    t15 <- 85985, 37253
+     movl    -32(%ebp), %eax         #  48:     add    t15 <- t14, 77067
-     movl    $37253, %ebx           
+     movl    $77067, %ebx           
+     movl    $4, %eax                #  49:     param  1 <- 4
-     movl    -24(%ebp), %eax         #  45:     mul    t14 <- t12, t13
-     movl    -28(%ebp), %ebx        
-     imull   %ebx                   
+     pushl   %eax                   
-     movl    %eax, -32(%ebp)        
-     movl    -32(%ebp), %eax         #  46:     add    t16 <- t14, 77067
+     movl    8(%ebp), %eax           #  50:     param  0 <- v0
-     movl    $77067, %ebx           
+     pushl   %eax                   
+     call    DIM                     #  51:     call   t16 <- DIM
-     addl    %ebx, %eax             
+     addl    $8, %esp               
+     movl    -36(%ebp), %eax         #  52:     mul    t17 <- t15, t16
+     movl    -40(%ebp), %ebx        
+     imull   %ebx                   
+     movl    %eax, -44(%ebp)        
+     movl    -44(%ebp), %eax         #  53:     add    t18 <- t17, 38244
+     movl    $38244, %ebx           
+     addl    %ebx, %eax             
+     movl    %eax, -48(%ebp)        
-     movl    $4, %eax                #  47:     param  1 <- 4
+     movl    $5, %eax                #  54:     param  1 <- 5
-     movl    8(%ebp), %eax           #  48:     param  0 <- v0
+     movl    8(%ebp), %eax           #  55:     param  0 <- v0
-     call    DIM                     #  49:     call   t17 <- DIM
+     call    DIM                     #  56:     call   t19 <- DIM
-     movl    %eax, -44(%ebp)        
-     movl    -40(%ebp), %eax         #  50:     mul    t18 <- t16, t17
-     movl    -44(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -48(%ebp)        
-     movl    -48(%ebp), %eax         #  51:     add    t19 <- t18, 38244
-     movl    $38244, %ebx           
-     addl    %ebx, %eax             
-     movl    $5, %eax                #  52:     param  1 <- 5
+     movl    -48(%ebp), %eax         #  57:     mul    t20 <- t18, t19
+     movl    -52(%ebp), %ebx        
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    8(%ebp), %eax           #  53:     param  0 <- v0
-     pushl   %eax                   
-     call    DIM                     #  54:     call   t20 <- DIM
-     addl    $8, %esp               
-     movl    -52(%ebp), %eax         #  55:     mul    t21 <- t19, t20
+     movl    -56(%ebp), %eax         #  58:     add    t21 <- t20, 91197
-     movl    -56(%ebp), %ebx        
+     movl    $91197, %ebx           
-     imull   %ebx                   
+     addl    %ebx, %eax             
-     movl    -60(%ebp), %eax         #  56:     add    t22 <- t21, 91197
+     movl    -60(%ebp), %eax         #  59:     mul    t22 <- t21, 1
-     movl    $91197, %ebx           
+     movl    $1, %ebx               
-     addl    %ebx, %eax             
+     imull   %ebx                   
-     movl    -64(%ebp), %eax         #  57:     mul    t23 <- t22, 1
+     movl    8(%ebp), %eax           #  60:     param  0 <- v0
-     movl    $1, %ebx               
-     imull   %ebx                   
+     pushl   %eax                   
+     call    DOFS                    #  61:     call   t23 <- DOFS
+     addl    $4, %esp               
-     movl    8(%ebp), %eax           #  58:     param  0 <- v0
+     movl    -64(%ebp), %eax         #  62:     add    t24 <- t22, t23
+     movl    -68(%ebp), %ebx        
-     pushl   %eax                   
-     call    DOFS                    #  59:     call   t24 <- DOFS
-     addl    $4, %esp               
+     addl    %ebx, %eax             
-     movl    -68(%ebp), %eax         #  60:     add    t25 <- t23, t24
+     movl    8(%ebp), %eax           #  63:     add    t25 <- v0, t24
-     movl    8(%ebp), %eax           #  61:     add    t26 <- v0, t25
-     movl    -76(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -80(%ebp)        
-     movzbl  -84(%ebp), %eax         #  62:     assign @t26 <- t8
+     movzbl  -80(%ebp), %eax         #  64:     assign @t25 <- t8
-     movl    -80(%ebp), %edi        
+     movl    -76(%ebp), %edi        
-     addl    $88, %esp               # remove locals
+     addl    $84, %esp               # remove locals
-     jmp     l_f1_3                  #   0:     goto   3
+     jmp     l_f1_4                  #   0:     goto   4
-     jmp     l_f1_3                  #   1:     goto   3
+     jmp     l_f1_4                  #   1:     goto   4
-     jmp     l_f1_3                  #   2:     goto   3
+     jmp     l_f1_4                  #   2:     goto   4
- l_f1_3:
+ l_f1_4:
-     jmp     l_f1_5                  #   5:     goto   5
+     jmp     l_f1_6                  #   5:     goto   6
- l_f1_5:
+ l_f1_6:
-     #  -5208(%ebp)5144  [ $v1       <array 2 of <array 1 of <array 10 of <array 8 of <array 8 of <int>>>>>> %ebp-5208 ]
+     #   -5208(%ebp)  5144  [ $v1       <array 2 of <array 1 of <array 10 of <array 8 of <array 8 of <int>>>>>> %ebp-5208 ]
-     # -35472(%ebp)30264  [ $v2       <array 9 of <array 3 of <array 8 of <array 7 of <array 5 of <int>>>>>> %ebp-35472 ]
+     #   -35472(%ebp)  30264  [ $v2       <array 9 of <array 3 of <array 8 of <array 7 of <array 5 of <int>>>>>> %ebp-35472 ]
-     addl    $10, %esp              
+     addl    $16, %esp              
