+     jmp     l_f2_2                  #   6:     goto   2
-     movl    $0, %eax                #   7:     assign v4 <- 0
+     movl    $0, %eax                #   8:     assign v4 <- 0
-     movl    $77539, %eax            #   8:     sub    t4 <- 77539, 59267
+     movl    $77539, %eax            #   9:     sub    t4 <- 77539, 59267
-     movl    -28(%ebp), %eax         #   9:     param  0 <- t4
+     movl    -28(%ebp), %eax         #  10:     param  0 <- t4
+     pushl   %eax                   
+     call    WriteInt                #  11:     call   WriteInt
+     addl    $4, %esp               
+     jmp     l_f2_3_while_cond       #  12:     goto   3_while_cond
+ l_f2_2:
+ 
+ l_f2_exit:
+     # epilogue
+     addl    $16, %esp               # remove locals
+     popl    %edi                   
+     popl    %esi                   
+     popl    %ebx                   
+     popl    %ebp                   
+     ret                            
+ 
+     # scope test
+ main:
+     # stack offsets:
+     #    -16(%ebp)   4  [ $t0       <int> %ebp-16 ]
+ 
+     # prologue
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
+     pushl   %esi                   
+     pushl   %edi                   
+     subl    $4, %esp                # make room for locals
+ 
+     xorl    %eax, %eax              # memset local stack area to 0
+     movl    %eax, 0(%esp)          
+ 
+     # function body
+     movl    $36243, %eax            #   0:     assign v0 <- 36243
+     movl    %eax, v0               
+     jmp     l_test_2_if_true        #   1:     goto   2_if_true
+     jmp     l_test_3_if_false       #   2:     goto   3_if_false
+     jmp     l_test_3_if_false       #   3:     goto   3_if_false
+ l_test_2_if_true:
+     jmp     l_test_1                #   5:     goto   1
+ l_test_3_if_false:
+ l_test_1:
+     movl    $38011, %eax            #   8:     add    t0 <- 38011, 13798
+     movl    $13798, %ebx           
+     addl    %ebx, %eax             
+     movl    %eax, -16(%ebp)        
+     movl    -16(%ebp), %eax         #   9:     param  0 <- t0
-     jmp     l_f2_3_while_cond       #  11:     goto   3_while_cond
- 
- l_f2_exit:
-     # epilogue
-     addl    $16, %esp               # remove locals
-     popl    %edi                   
-     popl    %esi                   
-     popl    %ebx                   
-     popl    %ebp                   
-     ret                            
- 
-     # scope test
- main:
-     # stack offsets:
-     #    -16(%ebp)   4  [ $t0       <int> %ebp-16 ]
- 
-     # prologue
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
-     pushl   %edi                   
-     subl    $4, %esp                # make room for locals
- 
-     xorl    %eax, %eax              # memset local stack area to 0
-     movl    %eax, 0(%esp)          
- 
-     # function body
-     movl    $36243, %eax            #   0:     assign v0 <- 36243
-     movl    %eax, v0               
-     jmp     l_test_2_if_true        #   1:     goto   2_if_true
+     jmp     l_test_11_if_false      #  11:     goto   11_if_false
- l_test_2_if_true:
-     jmp     l_test_1                #   3:     goto   1
- l_test_1:
-     movl    $38011, %eax            #   5:     add    t0 <- 38011, 13798
-     movl    $13798, %ebx           
-     addl    %ebx, %eax             
-     movl    %eax, -16(%ebp)        
-     movl    -16(%ebp), %eax         #   6:     param  0 <- t0
-     pushl   %eax                   
-     call    WriteInt                #   7:     call   WriteInt
-     addl    $4, %esp               
-     movl    $34970, %eax            #   8:     if     34970 = 45890 goto 14_if_true
+     movl    $34970, %eax            #  12:     if     34970 = 45890 goto 14_if_true
-     jmp     l_test_15_if_false      #   9:     goto   15_if_false
+     jmp     l_test_15_if_false      #  13:     goto   15_if_false
-     jmp     l_test_13               #  11:     goto   13
+     jmp     l_test_13               #  15:     goto   13
-     jmp     l_test_9                #  14:     goto   9
+     jmp     l_test_9                #  18:     goto   9
+ l_test_11_if_false:
-     movl    $97, %eax               #  18:     assign v1 <- 97
+     movl    $97, %eax               #  23:     assign v1 <- 97
-     jmp     l_test_19_while_cond    #  19:     goto   19_while_cond
+     jmp     l_test_19_while_cond    #  24:     goto   19_while_cond
