+     jmp     l_f0_0                  #   2:     goto   0
-     call    dummyCHARfunc           #   3:     call   t4 <- dummyCHARfunc
+     call    dummyCHARfunc           #   4:     call   t4 <- dummyCHARfunc
-     movl    $76541, %eax            #   4:     assign v3 <- 76541
+     movl    $76541, %eax            #   5:     assign v3 <- 76541
-     jmp     l_f0_6                  #   6:     goto   6
+     jmp     l_f0_6                  #   7:     goto   6
-     jmp     l_f0_7_while_cond       #   7:     goto   7_while_cond
+     jmp     l_f0_7_while_cond       #   8:     goto   7_while_cond
-     movl    $1, %eax                #  10:     if     1 # 1 goto 11_while_body
+     movl    $1, %eax                #  11:     if     1 # 1 goto 11_while_body
-     jmp     l_f0_9                  #  11:     goto   9
+     jmp     l_f0_9                  #  12:     goto   9
-     jmp     l_f0_10_while_cond      #  13:     goto   10_while_cond
+     jmp     l_f0_10_while_cond      #  14:     goto   10_while_cond
-     movl    $100, %eax              #  15:     return 100
+     movl    $100, %eax              #  16:     return 100
-     movl    $97, %eax               #  16:     return 97
+     movl    $97, %eax               #  17:     return 97
-     jmp     l_f0_17_if_false        #  17:     goto   17_if_false
+     jmp     l_f0_17_if_false        #  18:     goto   17_if_false
-     jmp     l_f0_15                 #  18:     goto   15
+     jmp     l_f0_15                 #  19:     goto   15
-     jmp     l_f0_1_while_cond       #  21:     goto   1_while_cond
+     jmp     l_f0_1_while_cond       #  22:     goto   1_while_cond
+ l_f0_0:
-     call    dummyCHARfunc           #  22:     call   t5 <- dummyCHARfunc
+     call    dummyCHARfunc           #  24:     call   t5 <- dummyCHARfunc
-     movzbl  -14(%ebp), %eax         #  23:     return t5
+     movzbl  -14(%ebp), %eax         #  25:     return t5
-     call    dummyCHARfunc           #  24:     call   t6 <- dummyCHARfunc
+     call    dummyCHARfunc           #  26:     call   t6 <- dummyCHARfunc
-     movzbl  -15(%ebp), %eax         #  25:     return t6
+     movzbl  -15(%ebp), %eax         #  27:     return t6
-     #    -80(%ebp)   4  [ $t26      <int> %ebp-80 ]
-     #    -81(%ebp)   1  [ $t27      <char> %ebp-81 ]
+     #    -77(%ebp)   1  [ $t26      <char> %ebp-77 ]
-     #    -88(%ebp)   4  [ $t4       <ptr(4) to <array 16 of <array 16 of <array 97 of <array 26 of <array 36 of <bool>>>>>>> %ebp-88 ]
+     #    -84(%ebp)   4  [ $t4       <ptr(4) to <array 16 of <array 16 of <array 97 of <array 26 of <array 36 of <bool>>>>>>> %ebp-84 ]
-     #    -92(%ebp)   4  [ $t5       <ptr(4) to <array 95 of <array 70 of <array 47 of <array 71 of <array 61 of <char>>>>>>> %ebp-92 ]
+     #    -88(%ebp)   4  [ $t5       <ptr(4) to <array 95 of <array 70 of <array 47 of <array 71 of <array 61 of <char>>>>>>> %ebp-88 ]
-     #    -96(%ebp)   4  [ $t6       <ptr(4) to <array 52 of <array 63 of <array 2 of <array 1 of <array 82 of <char>>>>>>> %ebp-96 ]
+     #    -92(%ebp)   4  [ $t6       <ptr(4) to <array 52 of <array 63 of <array 2 of <array 1 of <array 82 of <char>>>>>>> %ebp-92 ]
-     #    -97(%ebp)   1  [ $t7       <char> %ebp-97 ]
+     #    -93(%ebp)   1  [ $t7       <char> %ebp-93 ]
+     #   -100(%ebp)   4  [ $t8       <int> %ebp-100 ]
-     #   -104(%ebp)   4  [ $t8       <int> %ebp-104 ]
+     #   -104(%ebp)   4  [ $t9       <int> %ebp-104 ]
-     #   -108(%ebp)   4  [ $t9       <int> %ebp-108 ]
-     #-537396(%ebp)537288  [ $v4       <array 52 of <array 63 of <array 2 of <array 1 of <array 82 of <char>>>>>> %ebp-537396 ]
+     #   -537392(%ebp)  537288  [ $v4       <array 52 of <array 63 of <array 2 of <array 1 of <array 82 of <char>>>>>> %ebp-537392 ]
-     #-1354191472(%ebp)1353654074  [ $v5       <array 95 of <array 70 of <array 47 of <array 71 of <array 61 of <char>>>>>> %ebp-1354191472 ]
+     #   -1354191468(%ebp)  1353654074  [ $v5       <array 95 of <array 70 of <array 47 of <array 71 of <array 61 of <char>>>>>> %ebp-1354191468 ]
-     #-1377434248(%ebp)23242776  [ $v6       <array 16 of <array 16 of <array 97 of <array 26 of <array 36 of <bool>>>>>> %ebp-1377434248 ]
+     #   -1377434244(%ebp)  23242776  [ $v6       <array 16 of <array 16 of <array 97 of <array 26 of <array 36 of <bool>>>>>> %ebp-1377434244 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $1377434236, %esp       # make room for locals
+     subl    $1377434232, %esp       # make room for locals
-     movl    $344358559, %ecx       
+     movl    $344358558, %ecx       
-     movl    $5,-537396(%ebp)        # local array 'v4': 5 dimensions
+     movl    $5,-537392(%ebp)        # local array 'v4': 5 dimensions
-     movl    $52,-537392(%ebp)       #   dimension 1: 52 elements
+     movl    $52,-537388(%ebp)       #   dimension 1: 52 elements
-     movl    $63,-537388(%ebp)       #   dimension 2: 63 elements
+     movl    $63,-537384(%ebp)       #   dimension 2: 63 elements
-     movl    $2,-537384(%ebp)        #   dimension 3: 2 elements
+     movl    $2,-537380(%ebp)        #   dimension 3: 2 elements
-     movl    $1,-537380(%ebp)        #   dimension 4: 1 elements
+     movl    $1,-537376(%ebp)        #   dimension 4: 1 elements
-     movl    $82,-537376(%ebp)       #   dimension 5: 82 elements
+     movl    $82,-537372(%ebp)       #   dimension 5: 82 elements
-     movl    $5,-1354191472(%ebp)    # local array 'v5': 5 dimensions
+     movl    $5,-1354191468(%ebp)    # local array 'v5': 5 dimensions
-     movl    $95,-1354191468(%ebp)   #   dimension 1: 95 elements
+     movl    $95,-1354191464(%ebp)   #   dimension 1: 95 elements
-     movl    $70,-1354191464(%ebp)   #   dimension 2: 70 elements
+     movl    $70,-1354191460(%ebp)   #   dimension 2: 70 elements
-     movl    $47,-1354191460(%ebp)   #   dimension 3: 47 elements
+     movl    $47,-1354191456(%ebp)   #   dimension 3: 47 elements
-     movl    $71,-1354191456(%ebp)   #   dimension 4: 71 elements
+     movl    $71,-1354191452(%ebp)   #   dimension 4: 71 elements
-     movl    $61,-1354191452(%ebp)   #   dimension 5: 61 elements
+     movl    $61,-1354191448(%ebp)   #   dimension 5: 61 elements
-     movl    $5,-1377434248(%ebp)    # local array 'v6': 5 dimensions
+     movl    $5,-1377434244(%ebp)    # local array 'v6': 5 dimensions
-     movl    $16,-1377434244(%ebp)   #   dimension 1: 16 elements
+     movl    $16,-1377434240(%ebp)   #   dimension 1: 16 elements
-     movl    $16,-1377434240(%ebp)   #   dimension 2: 16 elements
+     movl    $16,-1377434236(%ebp)   #   dimension 2: 16 elements
-     movl    $97,-1377434236(%ebp)   #   dimension 3: 97 elements
+     movl    $97,-1377434232(%ebp)   #   dimension 3: 97 elements
-     movl    $26,-1377434232(%ebp)   #   dimension 4: 26 elements
+     movl    $26,-1377434228(%ebp)   #   dimension 4: 26 elements
-     movl    $36,-1377434228(%ebp)   #   dimension 5: 36 elements
+     movl    $36,-1377434224(%ebp)   #   dimension 5: 36 elements
-     leal    -1377434248(%ebp), %eax #   2:     &()    t4 <- v6
+     leal    -1377434244(%ebp), %eax #   2:     &()    t4 <- v6
+     movl    %eax, -84(%ebp)        
+     movl    -84(%ebp), %eax         #   3:     param  2 <- t4
+     pushl   %eax                   
+     leal    -1354191468(%ebp), %eax #   4:     &()    t5 <- v5
-     movl    -88(%ebp), %eax         #   3:     param  2 <- t4
+     movl    -88(%ebp), %eax         #   5:     param  1 <- t5
-     leal    -1354191472(%ebp), %eax #   4:     &()    t5 <- v5
+     leal    -537392(%ebp), %eax     #   6:     &()    t6 <- v4
-     movl    -92(%ebp), %eax         #   5:     param  1 <- t5
-     pushl   %eax                   
-     leal    -537396(%ebp), %eax     #   6:     &()    t6 <- v4
-     movl    %eax, -96(%ebp)        
-     movl    -96(%ebp), %eax         #   7:     param  0 <- t6
+     movl    -92(%ebp), %eax         #   7:     param  0 <- t6
-     movb    %al, -97(%ebp)         
+     movb    %al, -93(%ebp)         
-     movzbl  -97(%ebp), %ebx        
+     movzbl  -93(%ebp), %ebx        
-     movl    %eax, -104(%ebp)       
+     movl    %eax, -100(%ebp)       
-     movl    %eax, -108(%ebp)       
+     movl    %eax, -104(%ebp)       
-     movl    -108(%ebp), %ebx       
+     movl    -104(%ebp), %ebx       
-     call    ReadInt                 #  29:     call   t18 <- ReadInt
-     movl    %eax, -48(%ebp)        
-     movl    -36(%ebp), %eax         #  30:     mul    t17 <- t15, t16
+     movl    -36(%ebp), %eax         #  29:     mul    t17 <- t15, t16
-     movl    -44(%ebp), %eax         #  31:     add    t19 <- t17, 12738
+     movl    -44(%ebp), %eax         #  30:     add    t18 <- t17, 12738
+     movl    %eax, -48(%ebp)        
+     movl    $5, %eax                #  31:     param  1 <- 5
+     pushl   %eax                   
+     movl    8(%ebp), %eax           #  32:     param  0 <- v0
+     pushl   %eax                   
+     call    DIM                     #  33:     call   t19 <- DIM
+     addl    $8, %esp               
-     movl    $5, %eax                #  32:     param  1 <- 5
+     movl    -48(%ebp), %eax         #  34:     mul    t20 <- t18, t19
+     movl    -52(%ebp), %ebx        
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    8(%ebp), %eax           #  33:     param  0 <- v0
-     pushl   %eax                   
-     call    DIM                     #  34:     call   t20 <- DIM
-     addl    $8, %esp               
-     movl    -52(%ebp), %eax         #  35:     mul    t21 <- t19, t20
-     movl    -56(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -60(%ebp)        
-     movl    -60(%ebp), %eax         #  36:     add    t22 <- t21, 80216
+     movl    -56(%ebp), %eax         #  35:     add    t21 <- t20, 80216
-     movl    %eax, -64(%ebp)        
+     movl    %eax, -60(%ebp)        
-     movl    -64(%ebp), %eax         #  37:     mul    t23 <- t22, 4
+     movl    -60(%ebp), %eax         #  36:     mul    t22 <- t21, 4
+     movl    %eax, -64(%ebp)        
+     movl    8(%ebp), %eax           #  37:     param  0 <- v0
+     pushl   %eax                   
+     call    DOFS                    #  38:     call   t23 <- DOFS
+     addl    $4, %esp               
-     movl    8(%ebp), %eax           #  38:     param  0 <- v0
+     movl    -64(%ebp), %eax         #  39:     add    t24 <- t22, t23
+     movl    -68(%ebp), %ebx        
-     pushl   %eax                   
-     call    DOFS                    #  39:     call   t24 <- DOFS
-     addl    $4, %esp               
+     addl    %ebx, %eax             
-     movl    -68(%ebp), %eax         #  40:     add    t25 <- t23, t24
+     movl    8(%ebp), %eax           #  40:     add    t25 <- v0, t24
-     movl    8(%ebp), %eax           #  41:     add    t26 <- v0, t25
-     movl    -76(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -80(%ebp)        
-     movl    -104(%ebp), %eax        #  42:     assign @t26 <- t8
+     movl    -100(%ebp), %eax        #  41:     assign @t25 <- t8
-     movl    -80(%ebp), %edi        
+     movl    -76(%ebp), %edi        
-     call    dummyCHARfunc           #  43:     call   t27 <- dummyCHARfunc
+     call    dummyCHARfunc           #  42:     call   t26 <- dummyCHARfunc
-     movb    %al, -81(%ebp)         
+     movb    %al, -77(%ebp)         
-     movzbl  -81(%ebp), %eax         #  44:     return t27
+     movzbl  -77(%ebp), %eax         #  43:     return t26
-     addl    $1377434236, %esp       # remove locals
+     addl    $1377434232, %esp       # remove locals
+     jmp     l_f2_12                 #  10:     goto   12
+     jmp     l_f2_12                 #  11:     goto   12
-     movl    $1, %eax                #  11:     assign t4 <- 1
+     movl    $1, %eax                #  13:     assign t4 <- 1
-     jmp     l_f2_13                 #  12:     goto   13
+     jmp     l_f2_13                 #  14:     goto   13
+ l_f2_12:
-     movl    $0, %eax                #  13:     assign t4 <- 0
+     movl    $0, %eax                #  16:     assign t4 <- 0
-     movzbl  -13(%ebp), %eax         #  15:     return t4
+     movzbl  -13(%ebp), %eax         #  18:     return t4
