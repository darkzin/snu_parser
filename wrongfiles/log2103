-     #    -60(%ebp)   4  [ $t19      <int> %ebp-60 ]
+     #    -57(%ebp)   1  [ $t19      <bool> %ebp-57 ]
-     #    -68(%ebp)   4  [ $t20      <int> %ebp-68 ]
+     #    -68(%ebp)   4  [ $t3       <int> %ebp-68 ]
-     #    -72(%ebp)   4  [ $t21      <int> %ebp-72 ]
+     #    -72(%ebp)   4  [ $t4       <int> %ebp-72 ]
-     #    -73(%ebp)   1  [ $t22      <bool> %ebp-73 ]
+     #    -76(%ebp)   4  [ $t5       <int> %ebp-76 ]
-     #    -80(%ebp)   4  [ $t3       <int> %ebp-80 ]
+     #    -80(%ebp)   4  [ $t6       <int> %ebp-80 ]
-     #    -84(%ebp)   4  [ $t4       <int> %ebp-84 ]
+     #    -84(%ebp)   4  [ $t7       <int> %ebp-84 ]
-     #    -88(%ebp)   4  [ $t5       <int> %ebp-88 ]
+     #    -88(%ebp)   4  [ $t8       <int> %ebp-88 ]
-     #    -92(%ebp)   4  [ $t6       <int> %ebp-92 ]
+     #    -92(%ebp)   4  [ $t9       <int> %ebp-92 ]
-     #    -96(%ebp)   4  [ $t7       <int> %ebp-96 ]
-     #   -100(%ebp)   4  [ $t8       <int> %ebp-100 ]
-     #   -104(%ebp)   4  [ $t9       <int> %ebp-104 ]
-     #   -105(%ebp)   1  [ $v2       <char> %ebp-105 ]
+     #    -93(%ebp)   1  [ $v2       <char> %ebp-93 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $96, %esp               # make room for locals
+     subl    $84, %esp               # make room for locals
-     movl    $24, %ecx              
+     movl    $21, %ecx              
+     movl    %eax, -68(%ebp)        
+     movl    -64(%ebp), %eax         #   6:     mul    t4 <- t2, t3
+     movl    -68(%ebp), %ebx        
+     imull   %ebx                   
+     movl    %eax, -72(%ebp)        
+     movl    -72(%ebp), %eax         #   7:     add    t5 <- t4, 94535
+     movl    $94535, %ebx           
+     addl    %ebx, %eax             
+     movl    %eax, -76(%ebp)        
+     movl    $3, %eax                #   8:     param  1 <- 3
+     pushl   %eax                   
+     movl    12(%ebp), %eax          #   9:     param  0 <- v1
+     pushl   %eax                   
+     call    DIM                     #  10:     call   t6 <- DIM
+     addl    $8, %esp               
-     movl    $39302, %eax            #   6:     mul    t5 <- 39302, 92018
+     movl    -76(%ebp), %eax         #  11:     mul    t7 <- t5, t6
+     movl    -80(%ebp), %ebx        
+     imull   %ebx                   
+     movl    %eax, -84(%ebp)        
+     movl    -84(%ebp), %eax         #  12:     add    t8 <- t7, 66063
-     movl    $92018, %ebx           
+     movl    $66063, %ebx           
-     imull   %ebx                   
+     addl    %ebx, %eax             
+     movl    $4, %eax                #  13:     param  1 <- 4
-     movl    -88(%ebp), %eax         #   7:     mul    t6 <- t5, 88665
-     movl    $88665, %ebx           
-     imull   %ebx                   
+     pushl   %eax                   
+     movl    12(%ebp), %eax          #  14:     param  0 <- v1
+     pushl   %eax                   
+     call    DIM                     #  15:     call   t9 <- DIM
+     addl    $8, %esp               
-     movl    -92(%ebp), %eax         #   8:     div    t7 <- t6, 11085
-     movl    $11085, %ebx           
-     cdq                            
-     idivl   %ebx                   
-     movl    %eax, -96(%ebp)        
-     movl    -64(%ebp), %eax         #   9:     mul    t4 <- t2, t3
+     movl    -88(%ebp), %eax         #  16:     mul    t10 <- t8, t9
-     movl    -80(%ebp), %ebx        
+     movl    -92(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -84(%ebp)        
-     movl    -84(%ebp), %eax         #  10:     add    t8 <- t4, 94535
-     movl    $94535, %ebx           
-     addl    %ebx, %eax             
-     movl    %eax, -100(%ebp)       
-     movl    $3, %eax                #  11:     param  1 <- 3
-     pushl   %eax                   
-     movl    12(%ebp), %eax          #  12:     param  0 <- v1
-     pushl   %eax                   
-     call    DIM                     #  13:     call   t9 <- DIM
-     addl    $8, %esp               
-     movl    %eax, -104(%ebp)       
-     movl    -100(%ebp), %eax        #  14:     mul    t10 <- t8, t9
-     movl    -104(%ebp), %ebx       
-     movl    -24(%ebp), %eax         #  15:     add    t11 <- t10, 66063
+     movl    -24(%ebp), %eax         #  17:     add    t11 <- t10, 6955
-     movl    $66063, %ebx           
+     movl    $6955, %ebx            
-     movl    $4, %eax                #  16:     param  1 <- 4
+     movl    $5, %eax                #  18:     param  1 <- 5
-     movl    12(%ebp), %eax          #  17:     param  0 <- v1
+     movl    12(%ebp), %eax          #  19:     param  0 <- v1
-     call    DIM                     #  18:     call   t12 <- DIM
+     call    DIM                     #  20:     call   t12 <- DIM
-     movl    -28(%ebp), %eax         #  19:     mul    t13 <- t11, t12
+     movl    -28(%ebp), %eax         #  21:     mul    t13 <- t11, t12
-     movl    -36(%ebp), %eax         #  20:     add    t14 <- t13, 6955
+     movl    -36(%ebp), %eax         #  22:     add    t14 <- t13, 63879
-     movl    $6955, %ebx            
+     movl    $63879, %ebx           
-     movl    $5, %eax                #  21:     param  1 <- 5
+     movl    -40(%ebp), %eax         #  23:     mul    t15 <- t14, 1
+     movl    $1, %ebx               
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    12(%ebp), %eax          #  22:     param  0 <- v1
-     pushl   %eax                   
-     call    DIM                     #  23:     call   t15 <- DIM
-     addl    $8, %esp               
-     movl    -40(%ebp), %eax         #  24:     mul    t16 <- t14, t15
+     movl    12(%ebp), %eax          #  24:     param  0 <- v1
-     movl    -44(%ebp), %ebx        
-     imull   %ebx                   
+     pushl   %eax                   
+     call    DOFS                    #  25:     call   t16 <- DOFS
+     addl    $4, %esp               
-     movl    -48(%ebp), %eax         #  25:     add    t17 <- t16, 63879
+     movl    -44(%ebp), %eax         #  26:     add    t17 <- t15, t16
-     movl    $63879, %ebx           
+     movl    -48(%ebp), %ebx        
-     movl    -52(%ebp), %eax         #  26:     mul    t18 <- t17, 1
+     movl    12(%ebp), %eax          #  27:     add    t18 <- v1, t17
+     movl    -52(%ebp), %ebx        
-     movl    $1, %ebx               
+     addl    %ebx, %eax             
-     imull   %ebx                   
-     movl    12(%ebp), %eax          #  27:     param  0 <- v1
-     pushl   %eax                   
-     call    DOFS                    #  28:     call   t19 <- DOFS
-     addl    $4, %esp               
-     movl    %eax, -60(%ebp)        
-     movl    -56(%ebp), %eax         #  29:     add    t20 <- t18, t19
-     movl    -60(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -68(%ebp)        
-     movl    12(%ebp), %eax          #  30:     add    t21 <- v1, t20
-     movl    -68(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -72(%ebp)        
-     movl    $98, %eax               #  31:     assign @t21 <- 98
+     movl    $98, %eax               #  28:     assign @t18 <- 98
-     movl    -72(%ebp), %edi        
+     movl    -56(%ebp), %edi        
-     call    dummyBOOLfunc           #  32:     call   t22 <- dummyBOOLfunc
+     call    dummyBOOLfunc           #  29:     call   t19 <- dummyBOOLfunc
-     movb    %al, -73(%ebp)         
+     movb    %al, -57(%ebp)         
-     movl    $100, %eax              #  33:     if     100 = 99 goto 3_if_true
+     movl    $100, %eax              #  30:     if     100 = 99 goto 3_if_true
-     jmp     l_f1_4_if_false         #  34:     goto   4_if_false
+     jmp     l_f1_4_if_false         #  31:     goto   4_if_false
-     movl    $100, %eax              #  36:     return 100
+     movl    $100, %eax              #  33:     return 100
-     jmp     l_f1_2                  #  37:     goto   2
+     jmp     l_f1_2                  #  34:     goto   2
-     addl    $96, %esp               # remove locals
+     addl    $84, %esp               # remove locals
+     jmp     l_f2_0                  #   1:     goto   0
+     jmp     l_f2_0                  #   2:     goto   0
-     movl    $99, %eax               #   1:     assign v1 <- 99
+     movl    $99, %eax               #   3:     assign v1 <- 99
-     jmp     l_f2_1_while_cond       #   2:     goto   1_while_cond
+     jmp     l_f2_1_while_cond       #   4:     goto   1_while_cond
+ l_f2_0:
-     movl    $98, %eax               #   4:     if     98 >= 100 goto 8_while_body
+     movl    $98, %eax               #   7:     if     98 >= 100 goto 8_while_body
-     jmp     l_f2_6                  #   5:     goto   6
+     jmp     l_f2_6                  #   8:     goto   6
-     movl    $98, %eax               #   7:     if     98 < 98 goto 11_if_true
+     movl    $98, %eax               #  10:     if     98 < 98 goto 11_if_true
-     jmp     l_f2_12_if_false        #   8:     goto   12_if_false
+     jmp     l_f2_12_if_false        #  11:     goto   12_if_false
-     jmp     l_f2_10                 #  10:     goto   10
+     jmp     l_f2_10                 #  13:     goto   10
-     movl    $97, %eax               #  13:     return 97
+     movl    $97, %eax               #  16:     return 97
-     movl    $63096, %eax            #  14:     assign v2 <- 63096
+     movl    $63096, %eax            #  17:     assign v2 <- 63096
-     jmp     l_f2_16                 #  15:     goto   16
+     jmp     l_f2_16                 #  18:     goto   16
-     movl    $26915, %eax            #  17:     assign v2 <- 26915
+     movl    $26915, %eax            #  20:     assign v2 <- 26915
-     jmp     l_f2_7_while_cond       #  18:     goto   7_while_cond
+     jmp     l_f2_7_while_cond       #  21:     goto   7_while_cond
-     jmp     l_f2_23                 #  20:     goto   23
+     jmp     l_f2_23                 #  23:     goto   23
-     movl    $98, %eax               #  22:     return 98
+     movl    $98, %eax               #  25:     return 98
-     movl    $0, %eax                #  23:     if     0 = 1 goto 28_if_true
+     movl    $0, %eax                #  26:     if     0 = 1 goto 28_if_true
-     jmp     l_f2_29_if_false        #  24:     goto   29_if_false
+     jmp     l_f2_29_if_false        #  27:     goto   29_if_false
-     jmp     l_f2_27                 #  26:     goto   27
+     jmp     l_f2_27                 #  29:     goto   27
-     jmp     l_f2_20                 #  29:     goto   20
+     jmp     l_f2_20                 #  32:     goto   20
