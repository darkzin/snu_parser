-     #   -104(%ebp)   4  [ $t32      <int> %ebp-104 ]
-     #   -108(%ebp)   4  [ $t33      <int> %ebp-108 ]
-     #   -112(%ebp)   4  [ $t34      <int> %ebp-112 ]
-     #   -116(%ebp)   4  [ $t35      <int> %ebp-116 ]
-     #   -120(%ebp)   4  [ $v5       <int> %ebp-120 ]
+     #   -104(%ebp)   4  [ $v5       <int> %ebp-104 ]
-     #   -121(%ebp)   1  [ $v6       <char> %ebp-121 ]
+     #   -105(%ebp)   1  [ $v6       <char> %ebp-105 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $112, %esp              # make room for locals
+     subl    $96, %esp               # make room for locals
-     movl    $28, %ecx              
+     movl    $24, %ecx              
+     movl    -60(%ebp), %eax         #  25:     mul    t23 <- t21, t22
+     movl    -64(%ebp), %ebx        
+     imull   %ebx                   
+     movl    %eax, -68(%ebp)        
-     movl    $8691, %eax             #  25:     div    t24 <- 8691, 71892
+     movl    -68(%ebp), %eax         #  26:     add    t24 <- t23, 14492
-     movl    $71892, %ebx           
+     movl    $14492, %ebx           
-     cdq                            
-     idivl   %ebx                   
+     addl    %ebx, %eax             
+     movl    $5, %eax                #  27:     param  1 <- 5
-     movl    -72(%ebp), %eax         #  26:     mul    t25 <- t24, 86698
-     movl    $86698, %ebx           
-     imull   %ebx                   
+     pushl   %eax                   
+     movl    20(%ebp), %eax          #  28:     param  0 <- v4
+     pushl   %eax                   
+     call    DIM                     #  29:     call   t25 <- DIM
+     addl    $8, %esp               
-     movl    -76(%ebp), %eax         #  27:     mul    t26 <- t25, 34022
+     movl    -72(%ebp), %eax         #  30:     mul    t26 <- t24, t25
-     movl    $34022, %ebx           
+     movl    -76(%ebp), %ebx        
-     movl    -80(%ebp), %eax         #  28:     div    t27 <- t26, 33143
+     movl    -80(%ebp), %eax         #  31:     add    t27 <- t26, 47194
-     movl    $33143, %ebx           
+     movl    $47194, %ebx           
-     cdq                            
-     idivl   %ebx                   
+     addl    %ebx, %eax             
-     movl    -60(%ebp), %eax         #  29:     mul    t23 <- t21, t22
+     movl    -84(%ebp), %eax         #  32:     mul    t28 <- t27, 4
-     movl    -64(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -68(%ebp)        
-     movl    -68(%ebp), %eax         #  30:     add    t28 <- t23, 14492
-     movl    $14492, %ebx           
+     movl    $4, %ebx               
-     addl    %ebx, %eax             
+     imull   %ebx                   
-     movl    $5, %eax                #  31:     param  1 <- 5
-     pushl   %eax                   
-     movl    20(%ebp), %eax          #  32:     param  0 <- v4
+     movl    20(%ebp), %eax          #  33:     param  0 <- v4
-     call    DIM                     #  33:     call   t29 <- DIM
+     call    DOFS                    #  34:     call   t29 <- DOFS
-     addl    $8, %esp               
+     addl    $4, %esp               
-     movl    -88(%ebp), %eax         #  34:     mul    t30 <- t28, t29
+     movl    -88(%ebp), %eax         #  35:     add    t30 <- t28, t29
-     imull   %ebx                   
+     addl    %ebx, %eax             
-     movl    -96(%ebp), %eax         #  35:     add    t31 <- t30, 47194
+     movl    20(%ebp), %eax          #  36:     add    t31 <- v4, t30
-     movl    $47194, %ebx           
+     movl    -96(%ebp), %ebx        
-     movl    -100(%ebp), %eax        #  36:     mul    t32 <- t31, 4
-     movl    $4, %ebx               
-     imull   %ebx                   
-     movl    %eax, -104(%ebp)       
-     movl    20(%ebp), %eax          #  37:     param  0 <- v4
-     pushl   %eax                   
-     call    DOFS                    #  38:     call   t33 <- DOFS
-     addl    $4, %esp               
-     movl    %eax, -108(%ebp)       
-     movl    -104(%ebp), %eax        #  39:     add    t34 <- t32, t33
-     movl    -108(%ebp), %ebx       
-     addl    %ebx, %eax             
-     movl    %eax, -112(%ebp)       
-     movl    20(%ebp), %eax          #  40:     add    t35 <- v4, t34
-     movl    -112(%ebp), %ebx       
-     addl    %ebx, %eax             
-     movl    %eax, -116(%ebp)       
-     movl    -20(%ebp), %eax         #  41:     assign @t35 <- t11
+     movl    -20(%ebp), %eax         #  37:     assign @t31 <- t11
-     movl    -116(%ebp), %edi       
+     movl    -100(%ebp), %edi       
-     movl    $100, %eax              #  42:     assign v6 <- 100
+     movl    $100, %eax              #  38:     assign v6 <- 100
-     movb    %al, -121(%ebp)        
+     movb    %al, -105(%ebp)        
-     addl    $112, %esp              # remove locals
+     addl    $96, %esp               # remove locals
+     jmp     l_f2_13                 #  15:     goto   13
+     jmp     l_f2_13                 #  16:     goto   13
+     jmp     l_f2_13                 #  17:     goto   13
-     jmp     l_f2_14_while_cond      #  15:     goto   14_while_cond
+     jmp     l_f2_14_while_cond      #  18:     goto   14_while_cond
+ l_f2_13:
-     jmp     l_test_10               #  14:     goto   10
+     jmp     l_test_11               #  14:     goto   11
+     jmp     l_test_12               #  15:     goto   12
- l_test_10:
+ l_test_11:
-     movl    $1, %eax                #  16:     assign t4 <- 1
+     movl    $1, %eax                #  17:     assign t4 <- 1
-     jmp     l_test_12               #  17:     goto   12
+     jmp     l_test_13               #  18:     goto   13
+ l_test_12:
-     movl    $0, %eax                #  18:     assign t4 <- 0
+     movl    $0, %eax                #  20:     assign t4 <- 0
- l_test_12:
+ l_test_13:
+     jmp     l_test_18               #  22:     goto   18
+     jmp     l_test_18               #  23:     goto   18
+     jmp     l_test_18               #  24:     goto   18
+     jmp     l_test_18               #  25:     goto   18
-     movl    $1, %eax                #  20:     assign t5 <- 1
+     movl    $1, %eax                #  26:     assign t5 <- 1
-     jmp     l_test_18               #  21:     goto   18
+     jmp     l_test_19               #  27:     goto   19
+ l_test_18:
-     movl    $0, %eax                #  22:     assign t5 <- 0
+     movl    $0, %eax                #  29:     assign t5 <- 0
- l_test_18:
+ l_test_19:
-     movzbl  -25(%ebp), %eax         #  24:     if     t4 = t5 goto 7
+     movzbl  -25(%ebp), %eax         #  31:     if     t4 = t5 goto 7
-     jmp     l_test_8                #  25:     goto   8
+     jmp     l_test_8                #  32:     goto   8
-     movl    $1, %eax                #  27:     assign t6 <- 1
+     movl    $1, %eax                #  34:     assign t6 <- 1
-     jmp     l_test_9                #  28:     goto   9
+     jmp     l_test_9                #  35:     goto   9
-     movl    $0, %eax                #  30:     assign t6 <- 0
+     movl    $0, %eax                #  37:     assign t6 <- 0
-     movzbl  -27(%ebp), %eax         #  32:     param  1 <- t6
+     movzbl  -27(%ebp), %eax         #  39:     param  1 <- t6
-     leal    v1, %eax                #  33:     &()    t7 <- v1
+     leal    v1, %eax                #  40:     &()    t7 <- v1
-     movl    -32(%ebp), %eax         #  34:     param  0 <- t7
+     movl    -32(%ebp), %eax         #  41:     param  0 <- t7
-     call    f1                      #  35:     call   t8 <- f1
+     call    f1                      #  42:     call   t8 <- f1
-     addl    $13, %esp              
+     addl    $16, %esp              
-     call    dummyCHARfunc           #  37:     call   t9 <- dummyCHARfunc
+     call    dummyCHARfunc           #  44:     call   t9 <- dummyCHARfunc
-     movl    $100, %eax              #  38:     if     100 <= t9 goto 29_if_true
+     movl    $100, %eax              #  45:     if     100 <= t9 goto 29_if_true
-     jmp     l_test_30_if_false      #  39:     goto   30_if_false
+     jmp     l_test_30_if_false      #  46:     goto   30_if_false
-     jmp     l_test_32               #  42:     goto   32
+     jmp     l_test_32               #  49:     goto   32
-     jmp     l_test_33_while_cond    #  43:     goto   33_while_cond
+     jmp     l_test_33_while_cond    #  50:     goto   33_while_cond
-     jmp     l_test_28               #  45:     goto   28
+     jmp     l_test_28               #  52:     goto   28
