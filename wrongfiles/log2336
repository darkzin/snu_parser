-     #    -76(%ebp)   4  [ $t25      <int> %ebp-76 ]
-     #    -77(%ebp)   1  [ $t6       <char> %ebp-77 ]
+     #    -73(%ebp)   1  [ $t6       <char> %ebp-73 ]
-     #    -78(%ebp)   1  [ $t7       <bool> %ebp-78 ]
+     #    -74(%ebp)   1  [ $t7       <bool> %ebp-74 ]
+     #    -80(%ebp)   4  [ $t8       <int> %ebp-80 ]
-     #    -84(%ebp)   4  [ $t8       <int> %ebp-84 ]
+     #    -84(%ebp)   4  [ $t9       <int> %ebp-84 ]
-     #    -88(%ebp)   4  [ $t9       <int> %ebp-88 ]
-     #    -89(%ebp)   1  [ $v4       <bool> %ebp-89 ]
+     #    -85(%ebp)   1  [ $v4       <bool> %ebp-85 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $80, %esp               # make room for locals
+     subl    $76, %esp               # make room for locals
-     movl    $20, %ecx              
+     movl    $19, %ecx              
-     movb    %al, -77(%ebp)         
+     movb    %al, -73(%ebp)         
-     movzbl  -77(%ebp), %eax         #   2:     return t6
+     movzbl  -73(%ebp), %eax         #   2:     return t6
+     jmp     l_f0_4                  #   3:     goto   4
-     movl    $1, %eax                #   3:     assign t7 <- 1
+     movl    $1, %eax                #   4:     assign t7 <- 1
-     movb    %al, -78(%ebp)         
+     movb    %al, -74(%ebp)         
-     jmp     l_f0_5                  #   4:     goto   5
+     jmp     l_f0_5                  #   5:     goto   5
+ l_f0_4:
-     movl    $0, %eax                #   5:     assign t7 <- 0
+     movl    $0, %eax                #   7:     assign t7 <- 0
-     movb    %al, -78(%ebp)         
+     movb    %al, -74(%ebp)         
-     call    ReadInt                 #   7:     call   t8 <- ReadInt
+     call    ReadInt                 #   9:     call   t8 <- ReadInt
+     movl    %eax, -80(%ebp)        
+     movl    $2, %eax                #  10:     param  1 <- 2
+     pushl   %eax                   
+     movl    16(%ebp), %eax          #  11:     param  0 <- v2
+     pushl   %eax                   
+     call    DIM                     #  12:     call   t9 <- DIM
+     addl    $8, %esp               
-     movl    $2, %eax                #   8:     param  1 <- 2
-     pushl   %eax                   
-     movl    16(%ebp), %eax          #   9:     param  0 <- v2
-     pushl   %eax                   
-     call    DIM                     #  10:     call   t9 <- DIM
-     addl    $8, %esp               
-     movl    %eax, -88(%ebp)        
-     call    ReadInt                 #  11:     call   t11 <- ReadInt
-     movl    %eax, -20(%ebp)        
-     movl    -84(%ebp), %eax         #  12:     mul    t10 <- t8, t9
+     movl    -80(%ebp), %eax         #  13:     mul    t10 <- t8, t9
-     movl    -88(%ebp), %ebx        
+     movl    -84(%ebp), %ebx        
-     movl    -16(%ebp), %eax         #  13:     add    t12 <- t10, 43520
+     movl    -16(%ebp), %eax         #  14:     add    t11 <- t10, 43520
+     movl    %eax, -20(%ebp)        
+     movl    $3, %eax                #  15:     param  1 <- 3
+     pushl   %eax                   
+     movl    16(%ebp), %eax          #  16:     param  0 <- v2
+     pushl   %eax                   
+     call    DIM                     #  17:     call   t12 <- DIM
+     addl    $8, %esp               
-     movl    $3, %eax                #  14:     param  1 <- 3
+     movl    -20(%ebp), %eax         #  18:     mul    t13 <- t11, t12
+     movl    -24(%ebp), %ebx        
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    16(%ebp), %eax          #  15:     param  0 <- v2
-     pushl   %eax                   
-     call    DIM                     #  16:     call   t13 <- DIM
-     addl    $8, %esp               
-     movl    -24(%ebp), %eax         #  17:     mul    t14 <- t12, t13
-     movl    -28(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -32(%ebp)        
-     movl    -32(%ebp), %eax         #  18:     add    t15 <- t14, 97247
+     movl    -28(%ebp), %eax         #  19:     add    t14 <- t13, 97247
+     movl    %eax, -32(%ebp)        
+     movl    $4, %eax                #  20:     param  1 <- 4
+     pushl   %eax                   
+     movl    16(%ebp), %eax          #  21:     param  0 <- v2
+     pushl   %eax                   
+     call    DIM                     #  22:     call   t15 <- DIM
+     addl    $8, %esp               
-     movl    $4, %eax                #  19:     param  1 <- 4
+     movl    -32(%ebp), %eax         #  23:     mul    t16 <- t14, t15
+     movl    -36(%ebp), %ebx        
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    16(%ebp), %eax          #  20:     param  0 <- v2
-     pushl   %eax                   
-     call    DIM                     #  21:     call   t16 <- DIM
-     addl    $8, %esp               
-     movl    -36(%ebp), %eax         #  22:     mul    t17 <- t15, t16
-     movl    -40(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -44(%ebp)        
-     movl    -44(%ebp), %eax         #  23:     add    t18 <- t17, 64058
+     movl    -40(%ebp), %eax         #  24:     add    t17 <- t16, 64058
+     movl    %eax, -44(%ebp)        
+     movl    $5, %eax                #  25:     param  1 <- 5
+     pushl   %eax                   
+     movl    16(%ebp), %eax          #  26:     param  0 <- v2
+     pushl   %eax                   
+     call    DIM                     #  27:     call   t18 <- DIM
+     addl    $8, %esp               
-     movl    $5, %eax                #  24:     param  1 <- 5
+     movl    -44(%ebp), %eax         #  28:     mul    t19 <- t17, t18
+     movl    -48(%ebp), %ebx        
-     pushl   %eax                   
+     imull   %ebx                   
-     movl    16(%ebp), %eax          #  25:     param  0 <- v2
-     pushl   %eax                   
-     call    DIM                     #  26:     call   t19 <- DIM
-     addl    $8, %esp               
-     movl    -48(%ebp), %eax         #  27:     mul    t20 <- t18, t19
-     movl    -52(%ebp), %ebx        
-     imull   %ebx                   
-     movl    %eax, -56(%ebp)        
-     movl    -56(%ebp), %eax         #  28:     add    t21 <- t20, 96351
+     movl    -52(%ebp), %eax         #  29:     add    t20 <- t19, 96351
-     movl    %eax, -60(%ebp)        
+     movl    %eax, -56(%ebp)        
-     movl    -60(%ebp), %eax         #  29:     mul    t22 <- t21, 1
+     movl    -56(%ebp), %eax         #  30:     mul    t21 <- t20, 1
+     movl    %eax, -60(%ebp)        
+     movl    16(%ebp), %eax          #  31:     param  0 <- v2
+     pushl   %eax                   
+     call    DOFS                    #  32:     call   t22 <- DOFS
+     addl    $4, %esp               
-     movl    16(%ebp), %eax          #  30:     param  0 <- v2
+     movl    -60(%ebp), %eax         #  33:     add    t23 <- t21, t22
+     movl    -64(%ebp), %ebx        
-     pushl   %eax                   
-     call    DOFS                    #  31:     call   t23 <- DOFS
-     addl    $4, %esp               
+     addl    %ebx, %eax             
-     movl    -64(%ebp), %eax         #  32:     add    t24 <- t22, t23
+     movl    16(%ebp), %eax          #  34:     add    t24 <- v2, t23
-     movl    16(%ebp), %eax          #  33:     add    t25 <- v2, t24
-     movl    -72(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -76(%ebp)        
-     movzbl  -78(%ebp), %eax         #  34:     assign @t25 <- t7
+     movzbl  -74(%ebp), %eax         #  35:     assign @t24 <- t7
-     movl    -76(%ebp), %edi        
+     movl    -72(%ebp), %edi        
-     addl    $80, %esp               # remove locals
+     addl    $76, %esp               # remove locals
+     jmp     l_test_0                #   1:     goto   0
+     jmp     l_test_0                #   2:     goto   0
+     jmp     l_test_0                #   3:     goto   0
-     jmp     l_test_1_while_cond     #   2:     goto   1_while_cond
+     jmp     l_test_1_while_cond     #   5:     goto   1_while_cond
+ l_test_0:
-     jmp     l_test_9                #   3:     goto   9
+     jmp     l_test_10               #   7:     goto   10
- l_test_9:
+ l_test_10:
-     movl    $1, %eax                #   5:     assign t0 <- 1
+     movl    $1, %eax                #   9:     assign t0 <- 1
-     jmp     l_test_11               #   6:     goto   11
+     jmp     l_test_12               #  10:     goto   12
-     movl    $0, %eax                #   7:     assign t0 <- 0
+     movl    $0, %eax                #  11:     assign t0 <- 0
- l_test_11:
+ l_test_12:
-     movl    $0, %eax                #   9:     if     0 # t0 goto 7_if_true
+     movl    $0, %eax                #  13:     if     0 # t0 goto 7_if_true
-     jmp     l_test_8_if_false       #  10:     goto   8_if_false
+     jmp     l_test_8_if_false       #  14:     goto   8_if_false
-     movl    $0, %eax                #  13:     if     0 # 0 goto 16_while_body
+     movl    $0, %eax                #  17:     if     0 # 0 goto 16_while_body
-     jmp     l_test_14               #  14:     goto   14
+     jmp     l_test_14               #  18:     goto   14
-     jmp     l_test_15_while_cond    #  16:     goto   15_while_cond
+     jmp     l_test_15_while_cond    #  20:     goto   15_while_cond
-     jmp     l_test_18               #  19:     goto   18
+     jmp     l_test_18               #  23:     goto   18
-     jmp     l_test_19_while_cond    #  20:     goto   19_while_cond
+     jmp     l_test_19_while_cond    #  24:     goto   19_while_cond
-     jmp     l_test_6                #  22:     goto   6
+     jmp     l_test_6                #  26:     goto   6
-     call    dummyCHARfunc           #  27:     call   t1 <- dummyCHARfunc
+     call    dummyCHARfunc           #  31:     call   t1 <- dummyCHARfunc
-     movl    $100, %eax              #  28:     if     100 > t1 goto 24_while_body
+     movl    $100, %eax              #  32:     if     100 > t1 goto 24_while_body
-     jmp     l_test_22               #  29:     goto   22
+     jmp     l_test_22               #  33:     goto   22
-     jmp     l_test_23_while_cond    #  31:     goto   23_while_cond
+     jmp     l_test_23_while_cond    #  35:     goto   23_while_cond
-     jmp     l_test_27_while_cond    #  35:     goto   27_while_cond
+     jmp     l_test_27_while_cond    #  39:     goto   27_while_cond
-     leal    v3, %eax                #  36:     &()    t2 <- v3
+     leal    v3, %eax                #  40:     &()    t2 <- v3
-     movl    -20(%ebp), %eax         #  37:     param  3 <- t2
+     movl    -20(%ebp), %eax         #  41:     param  3 <- t2
-     leal    v2, %eax                #  38:     &()    t3 <- v2
+     leal    v2, %eax                #  42:     &()    t3 <- v2
-     movl    -24(%ebp), %eax         #  39:     param  2 <- t3
+     movl    -24(%ebp), %eax         #  43:     param  2 <- t3
-     movl    $66085, %eax            #  40:     param  1 <- 66085
+     movl    $66085, %eax            #  44:     param  1 <- 66085
-     leal    v1, %eax                #  41:     &()    t4 <- v1
+     leal    v1, %eax                #  45:     &()    t4 <- v1
-     movl    -28(%ebp), %eax         #  42:     param  0 <- t4
+     movl    -28(%ebp), %eax         #  46:     param  0 <- t4
-     call    f0                      #  43:     call   t5 <- f0
+     call    f0                      #  47:     call   t5 <- f0
-     movzbl  -29(%ebp), %eax         #  44:     assign v0 <- t5
+     movzbl  -29(%ebp), %eax         #  48:     assign v0 <- t5
