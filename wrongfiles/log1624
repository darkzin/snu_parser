-     #661148488(%ebp)-661148520  [ $v3       <array 58 of <array 74 of <array 93 of <array 88 of <array 87 of <int>>>>>> %ebp+661148488 ]
+     #   661148492(%ebp)  -661148520  [ $v3       <array 58 of <array 74 of <array 93 of <array 88 of <array 87 of <int>>>>>> %ebp+661148492 ]
-     #557137128(%ebp)104011360  [ $v4       <array 59 of <array 46 of <array 67 of <array 52 of <array 11 of <char>>>>>> %ebp+557137128 ]
+     #   557137132(%ebp)  104011360  [ $v4       <array 59 of <array 46 of <array 67 of <array 52 of <array 11 of <char>>>>>> %ebp+557137132 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $-557137140, %esp       # make room for locals
+     subl    $-557137144, %esp       # make room for locals
+     cld                             # memset local stack area to 0
+     xorl    %eax, %eax             
+     movl    $-139284286, %ecx      
+     mov     %esp, %edi             
+     rep     stosl                  
-     movl    $5,661148488(%ebp)      # local array 'v3': 5 dimensions
+     movl    $5,661148492(%ebp)      # local array 'v3': 5 dimensions
-     movl    $58,661148492(%ebp)     #   dimension 1: 58 elements
+     movl    $58,661148496(%ebp)     #   dimension 1: 58 elements
-     movl    $74,661148496(%ebp)     #   dimension 2: 74 elements
+     movl    $74,661148500(%ebp)     #   dimension 2: 74 elements
-     movl    $93,661148500(%ebp)     #   dimension 3: 93 elements
+     movl    $93,661148504(%ebp)     #   dimension 3: 93 elements
-     movl    $88,661148504(%ebp)     #   dimension 4: 88 elements
+     movl    $88,661148508(%ebp)     #   dimension 4: 88 elements
-     movl    $87,661148508(%ebp)     #   dimension 5: 87 elements
+     movl    $87,661148512(%ebp)     #   dimension 5: 87 elements
-     movl    $5,557137128(%ebp)      # local array 'v4': 5 dimensions
+     movl    $5,557137132(%ebp)      # local array 'v4': 5 dimensions
-     movl    $59,557137132(%ebp)     #   dimension 1: 59 elements
+     movl    $59,557137136(%ebp)     #   dimension 1: 59 elements
-     movl    $46,557137136(%ebp)     #   dimension 2: 46 elements
+     movl    $46,557137140(%ebp)     #   dimension 2: 46 elements
-     movl    $67,557137140(%ebp)     #   dimension 3: 67 elements
+     movl    $67,557137144(%ebp)     #   dimension 3: 67 elements
-     movl    $52,557137144(%ebp)     #   dimension 4: 52 elements
+     movl    $52,557137148(%ebp)     #   dimension 4: 52 elements
-     movl    $11,557137148(%ebp)     #   dimension 5: 11 elements
+     movl    $11,557137152(%ebp)     #   dimension 5: 11 elements
+     jmp     l_f1_0                  #   1:     goto   0
-     movl    $100, %eax              #   1:     if     100 > 97 goto 5
+     movl    $100, %eax              #   2:     if     100 > 97 goto 5
-     jmp     l_f1_6                  #   2:     goto   6
+     jmp     l_f1_6                  #   3:     goto   6
-     movl    $1, %eax                #   4:     assign t5 <- 1
+     movl    $1, %eax                #   5:     assign t5 <- 1
-     jmp     l_f1_7                  #   5:     goto   7
+     jmp     l_f1_7                  #   6:     goto   7
-     movl    $0, %eax                #   7:     assign t5 <- 0
+     movl    $0, %eax                #   8:     assign t5 <- 0
-     movzbl  -14(%ebp), %eax         #   9:     return t5
+     movzbl  -14(%ebp), %eax         #  10:     return t5
-     movl    $98, %eax               #  10:     if     98 >= 97 goto 10_if_true
+     movl    $98, %eax               #  11:     if     98 >= 97 goto 10_if_true
-     jmp     l_f1_11_if_false        #  11:     goto   11_if_false
+     jmp     l_f1_11_if_false        #  12:     goto   11_if_false
-     jmp     l_f1_9                  #  13:     goto   9
+     jmp     l_f1_9                  #  14:     goto   9
-     movl    $100, %eax              #  17:     if     100 = 98 goto 15_while_body
+     movl    $100, %eax              #  18:     if     100 = 98 goto 15_while_body
-     jmp     l_f1_13                 #  18:     goto   13
+     jmp     l_f1_13                 #  19:     goto   13
-     jmp     l_f1_14_while_cond      #  20:     goto   14_while_cond
+     jmp     l_f1_14_while_cond      #  21:     goto   14_while_cond
-     jmp     l_f1_17                 #  23:     goto   17
+     jmp     l_f1_17                 #  24:     goto   17
-     jmp     l_f1_18_while_cond      #  24:     goto   18_while_cond
+     jmp     l_f1_18_while_cond      #  25:     goto   18_while_cond
-     jmp     l_f1_1_while_cond       #  26:     goto   1_while_cond
+     jmp     l_f1_1_while_cond       #  27:     goto   1_while_cond
+ l_f1_0:
-     call    dummyCHARfunc           #  27:     call   t6 <- dummyCHARfunc
+     call    dummyCHARfunc           #  29:     call   t6 <- dummyCHARfunc
-     leal    557137128(%ebp), %eax   #  29:     &()    t7 <- v4
+     leal    557137132(%ebp), %eax   #  31:     &()    t7 <- v4
-     movl    -20(%ebp), %eax         #  30:     param  3 <- t7
+     movl    -20(%ebp), %eax         #  32:     param  3 <- t7
-     leal    661148488(%ebp), %eax   #  31:     &()    t8 <- v3
+     leal    661148492(%ebp), %eax   #  33:     &()    t8 <- v3
-     movl    -24(%ebp), %eax         #  32:     param  2 <- t8
+     movl    -24(%ebp), %eax         #  34:     param  2 <- t8
-     movl    $81494, %eax            #  33:     if     81494 >= 3005 goto 25
+     movl    $81494, %eax            #  35:     if     81494 >= 3005 goto 25
-     jmp     l_f1_26                 #  34:     goto   26
+     jmp     l_f1_26                 #  36:     goto   26
-     movl    $1, %eax                #  36:     assign t9 <- 1
+     movl    $1, %eax                #  38:     assign t9 <- 1
-     jmp     l_f1_27                 #  37:     goto   27
+     jmp     l_f1_27                 #  39:     goto   27
-     movl    $0, %eax                #  39:     assign t9 <- 0
+     movl    $0, %eax                #  41:     assign t9 <- 0
-     movzbl  -25(%ebp), %eax         #  41:     param  1 <- t9
+     movzbl  -25(%ebp), %eax         #  43:     param  1 <- t9
-     movl    $100, %eax              #  42:     param  0 <- 100
+     movl    $100, %eax              #  44:     param  0 <- 100
-     call    f0                      #  43:     call   t10 <- f0
+     call    f0                      #  45:     call   t10 <- f0
-     addl    $10, %esp              
+     addl    $16, %esp              
-     movzbl  -13(%ebp), %eax         #  44:     if     t10 = 1 goto 23_while_body
+     movzbl  -13(%ebp), %eax         #  46:     if     t10 = 1 goto 23_while_body
-     jmp     l_f1_22_while_cond      #  46:     goto   22_while_cond
+     jmp     l_f1_22_while_cond      #  48:     goto   22_while_cond
-     addl    $-557137140, %esp       # remove locals
+     addl    $-557137144, %esp       # remove locals
-     addl    $5, %esp               
+     addl    $8, %esp               
