-     #    -84(%ebp)   4  [ $t27      <int> %ebp-84 ]
-     #    -88(%ebp)   4  [ $t28      <int> %ebp-88 ]
-     #    -92(%ebp)   4  [ $t29      <ptr(4) to <array 3 of <array 8 of <array 5 of <array 9 of <array 5 of <char>>>>>>> %ebp-92 ]
+     #    -84(%ebp)   4  [ $t27      <ptr(4) to <array 3 of <array 8 of <array 5 of <array 9 of <array 5 of <char>>>>>>> %ebp-84 ]
-     #    -93(%ebp)   1  [ $t30      <bool> %ebp-93 ]
+     #    -85(%ebp)   1  [ $t28      <bool> %ebp-85 ]
-     #    -94(%ebp)   1  [ $t31      <bool> %ebp-94 ]
+     #    -86(%ebp)   1  [ $t29      <bool> %ebp-86 ]
-     #   -100(%ebp)   4  [ $t9       <int> %ebp-100 ]
+     #    -92(%ebp)   4  [ $t9       <int> %ebp-92 ]
-     #   -101(%ebp)   1  [ $v5       <char> %ebp-101 ]
+     #    -93(%ebp)   1  [ $v5       <char> %ebp-93 ]
-     #  -5528(%ebp)5424  [ $v6       <array 3 of <array 8 of <array 5 of <array 9 of <array 5 of <char>>>>>> %ebp-5528 ]
+     #   -5520(%ebp)  5424  [ $v6       <array 3 of <array 8 of <array 5 of <array 9 of <array 5 of <char>>>>>> %ebp-5520 ]
-     pushl   %ebp                   
-     movl    %esp, %ebp             
-     pushl   %ebx                    # save callee saved registers
-     pushl   %esi                   
+     pushl   %ebp                   
+     movl    %esp, %ebp             
+     pushl   %ebx                    # save callee saved registers
-     pushl   %edi                   
+     pushl   %esi                   
+     pushl   %edi                   
-     subl    $5516, %esp             # make room for locals
+     subl    $5508, %esp             # make room for locals
-     movl    $1379, %ecx            
+     movl    $1377, %ecx            
-     movl    $5,-5528(%ebp)          # local array 'v6': 5 dimensions
+     movl    $5,-5520(%ebp)          # local array 'v6': 5 dimensions
-     movl    $3,-5524(%ebp)          #   dimension 1: 3 elements
+     movl    $3,-5516(%ebp)          #   dimension 1: 3 elements
-     movl    $8,-5520(%ebp)          #   dimension 2: 8 elements
+     movl    $8,-5512(%ebp)          #   dimension 2: 8 elements
-     movl    $5,-5516(%ebp)          #   dimension 3: 5 elements
-     movl    $9,-5512(%ebp)          #   dimension 4: 9 elements
-     movl    $5,-5508(%ebp)          #   dimension 5: 5 elements
+     movl    $5,-5508(%ebp)          #   dimension 3: 5 elements
+     movl    $9,-5504(%ebp)          #   dimension 4: 9 elements
+     movl    $5,-5500(%ebp)          #   dimension 5: 5 elements
-     movl    %eax, -100(%ebp)       
+     movl    %eax, -92(%ebp)        
-     movl    -100(%ebp), %eax        #   1:     add    t10 <- t9, 96952
+     movl    -92(%ebp), %eax         #   1:     add    t10 <- t9, 96952
-     movl    $8930, %eax             #   5:     sub    t13 <- 8930, 31593
-     movl    $31593, %ebx           
-     subl    %ebx, %eax             
-     movl    %eax, -28(%ebp)        
-     movl    -28(%ebp), %eax         #   6:     add    t14 <- t13, 96952
-     movl    $96952, %ebx           
-     addl    %ebx, %eax             
-     movl    %eax, -32(%ebp)        
-     movl    -16(%ebp), %eax         #   7:     mul    t12 <- t10, t11
+     movl    -16(%ebp), %eax         #   5:     mul    t12 <- t10, t11
-     movl    -24(%ebp), %eax         #   8:     add    t15 <- t12, 76069
+     movl    -24(%ebp), %eax         #   6:     add    t13 <- t12, 76069
+     movl    %eax, -28(%ebp)        
+     movl    $3, %eax                #   7:     param  1 <- 3
+     pushl   %eax                   
+     movl    20(%ebp), %eax          #   8:     param  0 <- v4
+     pushl   %eax                   
+     call    DIM                     #   9:     call   t14 <- DIM
+     addl    $8, %esp               
+     movl    %eax, -32(%ebp)        
+     movl    -28(%ebp), %eax         #  10:     mul    t15 <- t13, t14
+     movl    -32(%ebp), %ebx        
+     imull   %ebx                   
+     movl    -36(%ebp), %eax         #  11:     add    t16 <- t15, 3980
+     movl    $3980, %ebx            
+     addl    %ebx, %eax             
+     movl    %eax, -40(%ebp)        
-     movl    $3, %eax                #   9:     param  1 <- 3
+     movl    $4, %eax                #  12:     param  1 <- 4
-     movl    20(%ebp), %eax          #  10:     param  0 <- v4
+     movl    20(%ebp), %eax          #  13:     param  0 <- v4
-     call    DIM                     #  11:     call   t16 <- DIM
+     call    DIM                     #  14:     call   t17 <- DIM
-     movl    %eax, -40(%ebp)        
+     movl    %eax, -44(%ebp)        
-     movl    -36(%ebp), %eax         #  12:     mul    t17 <- t15, t16
+     movl    -40(%ebp), %eax         #  15:     mul    t18 <- t16, t17
-     movl    -40(%ebp), %ebx        
+     movl    -44(%ebp), %ebx        
-     movl    %eax, -44(%ebp)        
-     movl    -44(%ebp), %eax         #  13:     add    t18 <- t17, 3980
-     movl    $3980, %ebx            
-     addl    %ebx, %eax             
+     movl    -48(%ebp), %eax         #  16:     add    t19 <- t18, 65240
+     movl    $65240, %ebx           
+     addl    %ebx, %eax             
+     movl    %eax, -52(%ebp)        
-     movl    $4, %eax                #  14:     param  1 <- 4
+     movl    $5, %eax                #  17:     param  1 <- 5
-     movl    20(%ebp), %eax          #  15:     param  0 <- v4
+     movl    20(%ebp), %eax          #  18:     param  0 <- v4
-     call    DIM                     #  16:     call   t19 <- DIM
+     call    DIM                     #  19:     call   t20 <- DIM
-     movl    %eax, -52(%ebp)        
+     movl    %eax, -56(%ebp)        
-     movl    -48(%ebp), %eax         #  17:     mul    t20 <- t18, t19
+     movl    -52(%ebp), %eax         #  20:     mul    t21 <- t19, t20
-     movl    -52(%ebp), %ebx        
+     movl    -56(%ebp), %ebx        
-     movl    %eax, -56(%ebp)        
-     movl    -56(%ebp), %eax         #  18:     add    t21 <- t20, 65240
-     movl    $65240, %ebx           
-     addl    %ebx, %eax             
-     movl    $5, %eax                #  19:     param  1 <- 5
-     pushl   %eax                   
-     movl    20(%ebp), %eax          #  20:     param  0 <- v4
+     movl    -60(%ebp), %eax         #  21:     add    t22 <- t21, 10145
+     movl    $10145, %ebx           
-     pushl   %eax                   
-     call    DIM                     #  21:     call   t22 <- DIM
-     addl    $8, %esp               
+     addl    %ebx, %eax             
-     movl    -60(%ebp), %eax         #  22:     mul    t23 <- t21, t22
+     movl    -64(%ebp), %eax         #  22:     mul    t23 <- t22, 1
-     movl    -64(%ebp), %ebx        
+     movl    $1, %ebx               
-     movl    -68(%ebp), %eax         #  23:     add    t24 <- t23, 10145
+     movl    20(%ebp), %eax          #  23:     param  0 <- v4
-     movl    $10145, %ebx           
+     pushl   %eax                   
+     call    DOFS                    #  24:     call   t24 <- DOFS
-     addl    %ebx, %eax             
+     addl    $4, %esp               
-     movl    -72(%ebp), %eax         #  24:     mul    t25 <- t24, 1
+     movl    -68(%ebp), %eax         #  25:     add    t25 <- t23, t24
+     movl    -72(%ebp), %ebx        
-     movl    $1, %ebx               
+     addl    %ebx, %eax             
-     imull   %ebx                   
+     movl    20(%ebp), %eax          #  26:     add    t26 <- v4, t25
+     movl    -76(%ebp), %ebx        
+     addl    %ebx, %eax             
+     movl    %eax, -80(%ebp)        
+     movl    $98, %eax               #  27:     assign @t26 <- 98
+     movl    -80(%ebp), %edi        
+     movb    %al, (%edi)            
+     leal    -5520(%ebp), %eax       #  28:     &()    t27 <- v6
+     movl    %eax, -84(%ebp)        
-     movl    20(%ebp), %eax          #  25:     param  0 <- v4
+     movl    -84(%ebp), %eax         #  29:     param  0 <- t27
-     call    DOFS                    #  26:     call   t26 <- DOFS
+     call    f0                      #  30:     call   t28 <- f0
-     movl    %eax, -80(%ebp)        
-     movl    -76(%ebp), %eax         #  27:     add    t27 <- t25, t26
-     movl    -80(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -84(%ebp)        
-     movl    20(%ebp), %eax          #  28:     add    t28 <- v4, t27
-     movl    -84(%ebp), %ebx        
-     addl    %ebx, %eax             
-     movl    %eax, -88(%ebp)        
-     movl    $98, %eax               #  29:     assign @t28 <- 98
-     movl    -88(%ebp), %edi        
-     movb    %al, (%edi)            
-     leal    -5528(%ebp), %eax       #  30:     &()    t29 <- v6
-     movl    %eax, -92(%ebp)        
-     movl    -92(%ebp), %eax         #  31:     param  0 <- t29
-     pushl   %eax                   
-     call    f0                      #  32:     call   t30 <- f0
-     addl    $4, %esp               
-     movb    %al, -93(%ebp)         
+     movb    %al, -85(%ebp)         
-     call    dummyBOOLfunc           #  34:     call   t31 <- dummyBOOLfunc
+     call    dummyBOOLfunc           #  32:     call   t29 <- dummyBOOLfunc
-     movb    %al, -94(%ebp)         
+     movb    %al, -86(%ebp)         
-     movl    $0, %eax                #  35:     if     0 # t31 goto 4_while_body
+     movl    $0, %eax                #  33:     if     0 # t29 goto 4_while_body
-     movzbl  -94(%ebp), %ebx        
+     movzbl  -86(%ebp), %ebx        
-     jmp     l_f1_2                  #  36:     goto   2
+     jmp     l_f1_2                  #  34:     goto   2
-     movl    $99, %eax               #  38:     if     99 = 99 goto 7_if_true
+     movl    $99, %eax               #  36:     if     99 = 99 goto 7_if_true
-     jmp     l_f1_8_if_false         #  39:     goto   8_if_false
+     jmp     l_f1_8_if_false         #  37:     goto   8_if_false
-     jmp     l_f1_6                  #  41:     goto   6
+     jmp     l_f1_6                  #  39:     goto   6
-     jmp     l_f1_3_while_cond       #  44:     goto   3_while_cond
+     jmp     l_f1_3_while_cond       #  42:     goto   3_while_cond
-     addl    $5516, %esp             # remove locals
+     addl    $5508, %esp             # remove locals
